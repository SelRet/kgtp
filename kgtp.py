#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys, getopt, os, ConfigParser

#This is config file name
kgtp_config = "/etc/kgtp"

class Lang:
    def __init__(self, language = "en"):
	self.data = {}
	self.language = language
	self.is_set = False
	self.add(self,
		 'Get following error when write config file "%s":',
		 '写配置文件"%s"时有下面的错误:')
	self.add(self,
		 'Get following error when read config file "%s":',
		 '读配置文件"%s"时有下面的错误:')
	self.add(self,
		 "Begin to setup KGTP...",
		 '开始设置KGTP...')

    def set_language(self, language):
	self.language = language
	self.is_set = True

    def add(self, en, cn):
	self.data[en] = cn

    def string(self, s):
	if self.language == "en" or (not self.data.has_key(s)):
	    return s
	return self.data[s]

def get_distro():
    if os.path.exists("/etc/redhat-release"):
	return "Redhat"

    try:
	fp = open("/etc/issue", "r")
	version = fp.readline()[0,6].lower()
	fp.close()
	if cmp("ubuntu", version) == 0:
	    return "Ubuntu"
    finally:
	return "other"

class Config(ConfigParser):
    def __init__(self):
	ConfigParser.__init__(self)
	ConfigParser.ConfigParser()

    def add_miss_section(self, miss, section):
	if not self.has_section(self, section):
	    self.add_section(self, section)
	    miss[section] = []

    def add_miss_option(self, miss, section, option, val, first)
	if not self.has_option(self, section, option)：
	    self.set(self, section, option, val)
	    if first:
		if not miss.has_key(section):
		    miss[section] = [option]
	    else:
		if miss.has_key(section) and len(miss[section]) > 0:
		    miss[section].append(option)

    def add_miss(self):
	'''Check if the config file misses some sections or options.
	Add the missing sections and options and record them in dict miss.
	Return miss.'''
	miss = {}

	add_miss_section(self, miss, "misc")
	add_miss_option(self, misc, "misc", "language", "", True)
	add_miss_option(self, misc, "misc", "distro", "")
	#This option is the status of confg:
	#"" means setup is not complete.
	#"done" means setup is complete.
	add_miss_option(self, misc, "misc", "setup", "")

	return miss

    def read(self, filename):
	self.filename = filename

	err_msg = False
	try:
	    ConfigParser.read(self, filename)
	except Exception,x:
	    err_msg = x

	miss = self.add_miss(self)

	try:
	    self.write(self)
	except Exception, x:
	    print lang.string('Get following error when write config file "%s":') %self.filename
	    print x
	    exit(-1)

	if not err_msg:
	    if len(miss) > 0:
		# Get err_msg according to miss.
		err_msg = ""
		for name in miss:
		    if len(miss[name]) > 0:
			err_msg += 'Section "' + name + '" miss'
			first = True
			for val in miss[name]:
			    if first:
				first = False
			    else:
				err_msg += ','
			    err_msg = ' option "' + val + "\""
			err_msg += ".\n"
		    else:
			err_msg += 'Miss section "' + name + "\".\n"

	if err_msg:
	    raise Exception(err_msg)

    def write(self):
	fp = open(self.filename,"w+")
	fp.write("# This file is generated by kgtp.py\n")
	ConfigParser.write(fp)
	fp.close()
	
    def check(self):
	if lang in self:
	    print 1

    def setup(self, auto = False):
	#Add a flag to mark config file as doesn't complete.
	self.set(self, "misc", "setup", "")
	self.write(self)

	#misc language
	if ((not auto) or len(self.get(self, "misc", "language")) == 0) and (not lang.is_set):
	    loop = True
	    while loop:
		s = raw_input("Which language do you want use?(English/Chinese)")
		if s[0] == "e" or s[0] == "E":
		    lang.set_langue("en")
		    loop = False
		elif s[0] == "c" or s[0] == "C":
		    lang.set_langue("cn")
		    loop = False
	self.set(self, "misc", "language", lang.language)

	#misc distro
	distro = get_distro()
	self.set(self, "misc", "distro", distro)
	print ""

	

	#Add a flag to mark config file as doesn't complete.
	self.set(self, "misc", "setup", "done")
	self.write(self)

def usage(name):
    print "Usage: " + name + " [option]"
    print "Options:"
    print "  -l, --language=LANGUAGE	  Set the language (English/Chinese) of output."
    print "  -c, --config-file=CONFIG_FILE    Set dir of config file.  The default is \"" + kgtp_config + "\"."
    print "  -r, --reconfig		   Reconfig the KGTP."
    print "  -h, --help		       Display this information."

def init(argv):
    '''Return 0 if init OK.
       Return 1 is need simple reconfig.
       Return 2 is need auto reconfig.
       Return -1 is got error.'''

    global lang, config

    #Check if we have root permission
    if os.geteuid() != 0:
	print "You need run this script as the root."
	return -1

    lang = Lang()

    #Handle argv
    try:
	opts, args = getopt.getopt(argv[1:], "hl:c:r", ["help", "language=", "config-file", "reconfig"])
    except getopt.GetoptError:
	usage(argv[0])
	return -1
    for opt, arg in opts:
	if opt in ("-h", "--help"):
	    usage(argv[0])
	    return -1
	elif opt in ("-l", "--language"):
	    lang.set_langue(arg)
	elif opt in ("-c", "--config-file"):
	    kgtp_config = arg
	elif opt in ("-r", "--reconfig"):
	    return 1

    #Config
    config = Config()
    try:
	config.read(kgtp_config)
    except Exception,x:
	print lang.string('Get following error when read config file "%s":') %config.filename
	print x
	print lang.string("Begin to setup KGTP...")
	return 1

    #Set lang from config.lang

    #Check if config is done.

    #Check if need auto check

    #Check if KGTP need check

    #Check GDB

    #Check Linux kernel

    #Check KGTP

    

    return 0

def config(auto = False):
    return 0

def run():
    #insmod

    #start GDB
    return 0

if __name__ == "__main__":
    ret = init(sys.argv)
    if ret > 0:
	#KGTP need reconfig.
	auto = False
	if ret == 2:
	    auto = True
	ret = config(auto)
    if ret < 0:
	exit (ret)

    run()

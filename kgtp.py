#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys, getopt, os, ConfigParser, re, shutil

#This is config file name
kgtp_dir = os.environ.get("HOME") + "/kgtp/"

kgtp_need_gdb_version = 7.6
kgtp_install_gdb = "gdb-7.6"

class Lang:
    def __init__(self, language = "en"):
	self.data = {}
	self.language = language
	self.is_set = False
	self.add(self,
		 'Get following error when write config file "%s":',
		 '写配置文件"%s"时有下面的错误:')
	self.add(self,
		 'Get following error when read config file "%s":',
		 '读配置文件"%s"时有下面的错误:')
	self.add(self,
		 "Begin to setup KGTP...",
		 '开始设置KGTP...')

    def set_language(self, language):
	self.language = language
	self.is_set = True

    def add(self, en, cn):
	self.data[en] = cn

    def string(self, s):
	if self.language == "en" or (not self.data.has_key(s)):
	    return s
	return self.data[s]

def retry(string = "", ret = -1):
    while True:
	s = raw_input(string + lang.string("[Retry]/Exit:"))
	if len(s) == 0 or s[0] == 'r' or s[0] == 'R':
	    break
	if s[0] == "E" or s[0] == "e":
	    exit(ret)

def get_distro():
    if os.path.exists("/etc/redhat-release"):
	return "Redhat"

    try:
	fp = open("/etc/issue", "r")
	version = fp.readline()[0,6].lower()
	fp.close()
	if cmp("ubuntu", version) == 0:
	    return "Ubuntu"
    finally:
	return "other"

def get_gdb_version(gdb):
    try:
	f = os.popen(gdb + " -v")
	v = f.readline()
	f.close()
    except:
	return -1
    if not re.match('^GNU gdb (.+) \d+\.\d+\S+$', v):
	return 0

    return float(re.search('\d+\.\d+', v).group())

def get_source_version(distro, name):
    if distro == "Redhat":
	try:
	    f = os.popen("yum list " + name)
	    v = f.readlines()
	    f.close()
	except:
	    return 0
	if len(v) <= 0:
            return 0
	v = v[-1]
    elif distro == "Ubuntu":
	try:
            f = os.popen("apt-get -qq changelog " + name)
            v = f.readline()
            f.close()
	except:
	    return 0
    else:
	return 0

    if not re.match('^'+name, v):
	return 0

    return float(re.search('\d+\.\d+', v).group())

def install_packages(distro, packages, auto):
    while True:
	ret = 0
	if distro == "Redhat":
	    ret = os.system("sudo yum -y install " + packages)
	elif distro == "Ubuntu":
	    ret = os.system("apt-get -y install " + packages)
	else:
	    if auto:
		return
	    while True:
		print lang.string("Please install " + packages + " before go to next step.\n")
		s = raw_input(lang.string('Input "y" and press "Enter" to continue'))
		if len(s) > 0 and (s[0] = 'y' or s[0] == "Y"):
		    return

	if ret == 0:
	    break
	else:
	    retry(lang.string("Install packages failed."), ret)

class Config(ConfigParser):
    def __init__(self):
	ConfigParser.__init__(self)
	ConfigParser.ConfigParser()

    def add_miss_section(self, miss, section):
	if not self.has_section(self, section):
	    self.add_section(self, section)
	    miss[section] = []

    def add_miss_option(self, miss, section, option, val, first)
	if not self.has_option(self, section, option)：
	    self.set(self, section, option, val)
	    if first:
		if not miss.has_key(section):
		    miss[section] = [option]
	    else:
		if miss.has_key(section) and len(miss[section]) > 0:
		    miss[section].append(option)

    def add_miss(self):
	'''Check if the config file misses some sections or options.
	Add the missing sections and options and record them in dict miss.
	Return miss.'''
	miss = {}

	add_miss_section(self, miss, "misc")
	add_miss_option(self, misc, "misc", "language", "", True)
	add_miss_option(self, misc, "misc", "distro", "")

	add_miss_section(self, miss, "gdb")
	add_miss_option(self, misc, "gdb", "dir", "gdb", True)
	add_miss_option(self, misc, "gdb", "source", "")
	

	#This option is the status of confg:
	#"" means setup is not complete.
	#"done" means setup is complete.
	add_miss_option(self, misc, "misc", "setup", "")

	return miss

    def read(self, filename):
	self.filename = filename

	err_msg = False
	try:
	    ConfigParser.read(self, filename)
	except Exception,x:
	    err_msg = x

	miss = self.add_miss(self)

	try:
	    self.write(self)
	except Exception, x:
	    print lang.string('Get following error when write config file "%s":') %self.filename
	    print x
	    exit(-1)

	if not err_msg:
	    if len(miss) > 0:
		# Get err_msg according to miss.
		err_msg = ""
		for name in miss:
		    if len(miss[name]) > 0:
			err_msg += 'Section "' + name + '" miss'
			first = True
			for val in miss[name]:
			    if first:
				first = False
			    else:
				err_msg += ','
			    err_msg = ' option "' + val + "\""
			err_msg += ".\n"
		    else:
			err_msg += 'Miss section "' + name + "\".\n"

	if err_msg:
	    raise Exception(err_msg)

    def write(self):
	fp = open(self.filename,"w+")
	fp.write("# This file is generated by kgtp.py\n")
	ConfigParser.write(fp)
	fp.close()
	
    def check(self):
	if lang in self:
	    print 1

    def setup(self, auto = False):
	#Add a flag to mark config file as doesn't complete.
	self.set(self, "misc", "setup", "")
	self.write(self)

	#misc language
	if ((not auto) or len(self.get(self, "misc", "language")) == 0) and (not lang.is_set):
	    while True:
		s = raw_input("Which language do you want use?(English/Chinese)")
		if len(s) == 0:
		    continue
		if s[0] == "e" or s[0] == "E":
		    lang.set_langue("en")
		    break
		elif s[0] == "c" or s[0] == "C":
		    lang.set_langue("cn")
		    break
	self.set(self, "misc", "language", lang.language)

	print lang.string("KGTP setup begin, please make sure current machine can access Internet first.")
	raw_input(lang.string('Press "Enter" to continue'))

	#misc distro
	distro = get_distro()
	self.set(self, "misc", "distro", distro)
	if distro == "Redhat" or distro == "Ubuntu":
	    print lang.string('Current system is "%s".') %distro
	else:
	    print lang.string("Current system is not complete support.  Need execute some commands with yourself.\nIf you want KGTP support your system, please report to https://github.com/teawater/kgtp/issues")

	#GDB
	if distro == "Other":
	    install_packages(distro, "gdb", auto)
	tmp_gdb_dir = False
	version = False
	while true:
	    if not tmp_gdb_dir:
	        tmp_gdb_dir = self.get(self, "gdb", "dir")
	    version = get_gdb_version(tmp_gdb_dir)
	    if version > 0:
	        self.set(self, "gdb", "dir", tmp_gdb_dir)
	        break
	    else:
	        print lang.string('Cannot execute the GDB in "%s".') %tmp_gdb_dir
	        tmp_gdb_dir = raw_input(lang.string('Please input the directory of GDB or just "Enter" to install it now:'))
	        if len(tmp_gdb_dir) == 0:
		    break
	if version < kgtp_need_gdb_version and self.get(self, "gdb", "source") != "":
	    #GDB was built from source that is too old.  Remove it.
	    while true:
		try:
		    shutil.rmtree(self.get(self, "gdb", "source"))
		except Exception, x:
		    print lang.string('Get following error when remove directory "%s":') %self.get(self, "gdb", "source")
		    print x
		    retry()

	if version < kgtp_need_gdb_version and distro != "Other":
	    #Try to install GDB from software source
	    print lang.string("Current GDB is not available or too old for KGTP.")
	    print lang.string("Check the software source...")
	    version = get_source_version(distro, "gdb")
	    if version >= kgtp_need_gdb_version:
		print lang.string("Install GDB...")
		install_packages(distro, "gdb", auto)
		self.set(self, "gdb", "dir", "gdb")
		self.set(self, "gdb", "source", "")
	    else:
		print lang.string("GDB in software source is too old for KGTP.")
	if version < kgtp_need_gdb_version:
	    #Install GDB from source code
	    print lang.string("Get and build a GDB that works OK with KGTP...")
	    if distro == "Ubuntu":
		install_packages(distro, "gcc texinfo m4 flex bison libncurses5-dev libexpat1-dev python-dev wget", auto)
	    else:
		install_packages(distro, "gcc texinfo m4 flex bison ncurses-devel expat-devel python-devel wget", auto)
	    while true:
		ret = os.system("wget http://ftp.gnu.org/gnu/gdb/" + kgtp_install_gdb + ".tar.bz2")
		if ret != 0:
		    retry("Download source of GDB failed.")
		    continue
		ret = os.system("tar vxjf " + kgtp_install_gdb + " -C ./")
		if ret != 0:
		    shutil.rmtree(kgtp_dir + kgtp_install_gdb + ".tar.bz2", True)
		    shutil.rmtree(kgtp_dir + kgtp_install_gdb, True)
		    retry("Uncompress source package failed.")
		    continue
	    #XXX os.chdir
	    #XXX config
	    #XXX makefile
	    shutil.rmtree(kgtp_dir + kgtp_install_gdb + ".tar.bz2", True)
	    self.set(self, "gdb", "source", kgtp_dir + kgtp_install_gdb)
	    self.set(self, "gdb", "dir", kgtp_dir + kgtp_install_gdb + "/gdb/gdb")

	#Get Linux kernel status
	#XXX Make sure current linux kernel
	#rpm -q kernel-$(uname -r)

	#KGTP
	#XXX install kernel dev
	if distro == "Ubuntu":#XXX
	    install_packages(distro, "git-core", auto)
	else:
	    install_packages(distro, "git", auto)
	

	#Install the software that build KGTP need.
	while 1:
	    ret = 0
	    if distro == "Redhat":
		ret = os.system("sudo yum -y install gcc makefile git")
	    elif distro == "Ubuntu":
		ret = os.system("apt-get -y install gcc texinfo m4 flex bison libncurses5-dev libexpat1-dev python-dev git-core")
	    else if not auto:
		print lang.string("Please install gcc texinfo m4 flex bison libncurses5-dev libexpat1-dev python-dev git before go to next step.\n")
		raw_input(lang.string('Press "Enter" to continue'))
	    if ret == 0:
		break
	    else:
		while True:
		    s = raw_input(lang.string("Install packages failed.[Retry]/Exit"))
		    if len(s) == 0 or s[0] == 'r' or s[0] == 'R':
			break
		    if s[0] == "E" or s[0] == "e":
			exit(ret)

	#Install Kernel debug image.

	#Install source of Kernel.

	#Install GDB that KGTP need.

	#Get and build KGTP

	#Add a flag to mark setup complete.
	self.set(self, "misc", "setup", "done")
	self.write(self)

def usage(name):
    print "Usage: " + name + " [option]"
    print "Options:"
    print "  -l, --language=LANGUAGE	  Set the language (English/Chinese) of output."
    print "  -d, --dir=KGTP_DIR    	  Set dir of kgtp.  The default is \"" + kgtp_dir + "\"."
    print "  -r, --reconfig		  Reconfig the KGTP."
    print "  -h, --help		          Display this information."

def init(argv):
    '''Return 0 if init OK.
       Return 1 is need simple reconfig.
       Return 2 is need auto reconfig.
       Return -1 is got error.'''

    global lang, config

    #Check if we have root permission
    if os.geteuid() != 0:
	print "You need run this script as the root."
	return -1

    lang = Lang()

    #Handle argv
    try:
	opts, args = getopt.getopt(argv[1:], "hl:d:r", ["help", "language=", "dir", "reconfig"])
    except getopt.GetoptError:
	usage(argv[0])
	return -1
    for opt, arg in opts:
	if opt in ("-h", "--help"):
	    usage(argv[0])
	    return -1
	elif opt in ("-l", "--language"):
	    lang.set_langue(arg)
	elif opt in ("-d", "--dir"):
	    kgtp_dir = arg
	elif opt in ("-r", "--reconfig"):
	    return 1

    #Dir
    #XXX mkdir
    os.chdir

    #Config
    config = Config()
    try:
	config.read(kgtp_dir + "config")
    except Exception,x:
	print lang.string('Get following error when read config file "%s":') %config.filename
	print x
	print lang.string("Begin to setup KGTP...")
	return 1

    #Set lang from config.lang

    #Check if config is done.

    #Check if need auto check

    #Check GDB

    #Check KGTP and insmod

    #Check Linux kernel
    

    return 0

def run():
    #insmod

    #start GDB
    return 0

if __name__ == "__main__":
    ret = init(sys.argv)
    if ret > 0:
	#KGTP need setup.
	auto = False
	if ret == 2:
	    auto = True
	ret = config.setup(auto)
    if ret < 0:
	exit(ret)

    run()
